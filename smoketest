#!/bin/bash
#
# A quick smoke-test of Lambkin.
#
# Creates, publishes, runs and schedules a basic function in Python and another
# in Node.js.

set -xeou pipefail

: ${LAMBKIN_LANGS:=node python}

for runtime in $LAMBKIN_LANGS; do
  func=lambkin-${runtime}-smoketest
  lambkin list-published | grep -q ${func} && lambkin unpublish --function=${func}
  rm -rf ${func}
  lambkin create ${func} $([[ ${runtime} == python ]] || echo --runtime=${runtime})
  cd ${func}

  [[ $runtime == python ]] && echo 'requests' > requirements.txt
  lambkin build

  lambkin publish --description="Test ${runtime} function from Lambkin." | jq .

  # Will it run?
  test $(lambkin run | jq -r .hello) = "World"

  # Timeout can be updated.
  test $(lambkin publish --timeout=123 | jq -r .Timeout) -eq 123
  # ...and the change persists
  test $(lambkin publish | jq -r .Timeout) -eq 123

  # Memory can be updated.
  test $(lambkin publish --memory=256 | jq -r .MemorySize) -eq 256
  # ...and the change persists
  test $(lambkin publish | jq -r .MemorySize) -eq 256

  ## Role tests are commented out, since they require manual creation of the
  ## test role to pass. Create a role called 'lambkin-smoketest' if you want
  ## to run them.
  ##
  ## Role can be updated.
  # lambkin publish --role=lambkin-smoketest | jq -r .Role | grep -q 'role/lambkin-smoketest$'
  ## ...and the change persists
  # lambkin publish | jq -r .Role | grep -q 'role/lambkin-smoketest$'

  # Scheduling supports both the "rate" and "cron" syntaxes.
  test $(lambkin schedule --rate '5 minutes' | jq -r .ResponseMetadata.HTTPStatusCode) -eq 200
  test $(lambkin schedule --cron '* * * * ? *' | jq -r .ResponseMetadata.HTTPStatusCode) -eq 200

  lambkin unpublish
  cd ..
  rm -rf ${func}
done

echo -e "\e[32mâœ”\e[0m PASS"
